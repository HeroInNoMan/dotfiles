#######################################################
# .bashrc file
#######################################################

# Misc config
#######################################################
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

# start ssh-agent if needed
[ -z "$SSH-AUTH-SOCK" ] && eval "$(ssh-agent)" > /dev/null

# load additional files
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

if [ -f /etc/bash_completion.d/git ]; then
    . /etc/bash_completion.d/git
fi

if [ -f /etc/bash_completion.d/git-prompt ]; then
    . /etc/bash_completion.d/git-prompt
fi

if [ -f ~/.localrc ]; then
	. ~/.localrc
fi

# ignore case on completion
bind 'set completion-ignore-case on'

# if [ -f ~/Terminalcity/dotfiles/make-completion-wrapper ]; then
#     . ~/Terminalcity/dotfiles/make-completion-wrapper
#
#     # qhe
#     make-completion-wrapper _quilt_completion _qhe qhe quilt header -e
#     complete -o filenames -F _qhe qhe
#     # apt-policy
#     __apt_cache_shortcut apt-policy policy
#     # apt-show
#     __apt_cache_shortcut apt-show show
#
#     # __git_shortcut  gs   status # no completion for git status
#     __git_shortcut  ga   add
#     __git_shortcut  gb   branch
#     __git_shortcut  gc   commit
#     __git_shortcut  gd   diff
#     __git_shortcut  go   checkout
#     __git_shortcut  gcp  cherry-pick
#     __git_shortcut  gpp  push
# fi
#
export PATH=$HOME/usr/bin:$PATH
export PATH=$HOME/bin:$PATH

# switch to 256 color term (especially for using emacs inside term)
# export TERM=screen-256color

export GTK_IM_MODULE=xim
export QT_IM_MODULE=xim

export PATH=$MAVEN_HOME/bin:$PATH
export PATH=$JAVA_HOME/bin:$PATH

use-java-7 () {
	export JAVA_HOME=$JAVA_7
}

use-java-8 () {
	export JAVA_HOME=$JAVA_8
}

maven-eclipse () {
	mvn eclipse:configure-workspace -Declipse.workspace="$WORKSPACE" eclipse:clean eclipse:eclipse -Dwtpversion=1.5 $@
}

maven-install-eclipse () {
	mvn clean install $@ &&	mvn eclipse:configure-workspace -Declipse.workspace="$WORKSPACE" eclipse:clean eclipse:eclipse -Dwtpversion=1.5
}

update-etags () {
	[ -f TAGS ] && rm TAGS
	find . -name '*.java' -exec etags -a {} \;
}

update-project () {
	PROJECT_DIR=$1
	FORMER_DIR=$(pwd)
	cd "$PROJECT_DIR"
	PROJECT_NAME=$(basename "$PROJECT_DIR")
	echo "* ${BOLD}$PROJECT_NAME${NORMAL}"
	[ -d ".git" ] && git-up
	[ -d ".svn" ] && svn update
	#	update-etags
	echo ""
	cd "$FORMER_DIR"
}

update-all () {
	for dir in $(find $HOME -type d -iname '.git' -o -maxdepth 3 -iname '.svn' 2> /dev/null | xargs dirname | sort); do
		update-project "$dir"
	done
}

build-all () {
	FORMER_DIR=$(pwd)
	for dir in $(find "$HOME/projets/" -type f -maxdepth 2 -name 'pom.xml' 2> /dev/null | xargs dirname | sort); do
		cd "$dir"
		echo "building $dir..."
		mvn clean install -U &> "$HOME/projets/mvn-output.log"
		if [ $? != 0 ]; then

			echo "build failed!" ; cp "$HOME/projets/mvn-output.log" $HOME/projets/mvn-output-$(basename $dir).log
		fi
	done
	rm "$HOME/projets/mvn-output.log"
	cd "$FORMER_DIR"
}

# define a few colours
#######################################################

BOLD=$(tput bold)
NORMAL=$(tput sgr0)

BLACK='\[\e[0;30m\]'
BLUE='\[\e[0;34m\]'
GREEN='\[\e[0;32m\]'
CYAN='\[\e[0;36m\]'
RED='\[\e[0;31m\]'
PURPLE='\[\e[0;35m\]'
BROWN='\[\e[0;33m\]'
L_GREY='\[\e[0;37m\]'
GREY='\[\e[1;30m\]'
L_BLUE='\[\e[1;34m\]'
L_GREEN='\[\e[1;32m\]'
L_CYAN='\[\e[1;36m\]'
L_RED='\[\e[1;31m\]'
L_PURPLE='\[\e[1;35m\]'
YELLOW='\[\e[1;33m\]'
WHITE='\[\e[1;37m\]'
NC='\[\e[0m\]' # No Colour

# infos git dans le prompt
GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWUNTRACKEDFILES=true
GIT_PS1_SHOWSTASHSTATE=true
GIT_PS1_SHOWUPSTREAM=auto
GIT_INFOS='$(__git_ps1)'

# prompt
#######################################################
PS1="$GREY($L_GREEN\u$GREY@$L_BLUE\h$GREY)" # (user@host)
PS1="${PS1}($RED\A$GREY)" # (23:59) date HH:MM
PS1="${PS1}($PURPLE\j$GREY)" # (0) jobs
PS1="${PS1}($CYAN\w$GREY)" # (~/current/directory)
PS1="${PS1}$L_RED$GIT_INFOS\n" # (master *+%) git infos
PS1="${PS1}$WHITE→$NC " # '→' prompt character

# THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# $SDKMAN_DIR must be defined in .localrc file
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"
