#######################################################
# .bashrc file
#######################################################

# Misc config
#######################################################
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# erase all previous lines that match current command, keep current command. See
# bash(1) for more options
shopt -s histappend
shopt -s histverify
export HISTCONTROL=erasedups
export HISTTIMEFORMAT="%d%m%y %T " # adds timestamp in history display

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Better cd, allows cool stuff like autocorrection and autocd by just typing the path
shopt -s autocd
shopt -s cdspell

if hash nvim 2>/dev/null;then
  # Use neovim for manpages
  export MANPAGER='nvim +Man!'
fi

# ignore case on completion (except if shell is called from inside emacs)
[ -z "$INSIDE_EMACS" ] && bind 'set completion-ignore-case on'

if [ -f ~/.emacs-profile ]; then
  SERVER_OPTION="-s $(/usr/bin/cat ~/.emacs-profile)"
fi

export ALTERNATE_EDITOR=""
export VISUAL="emacsclient -c -a '' $SERVER_OPTION" # $VISUAL opens in GUI mode
export EDITOR="emacsclient -t -a '' $SERVER_OPTION" # $EDITOR opens in terminal
export SUDO_EDITOR=$VISUAL                          # $SUDO_EDITOR opens in terminal
export MU_PLAY_PROGRAM="evince"                     # program to open attachments in mu4e

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

# start ssh-agent if needed
[ -z "$SSH-AUTH-SOCK" ] && eval "$(ssh-agent)" > /dev/null

# load additional files
if [ -f $HOME/.bash_aliases ]; then
  . $HOME/.bash_aliases
fi

if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

if [ -f /etc/bash_completion.d/git ]; then
  . /etc/bash_completion.d/git
fi

if [ -f /etc/bash_completion.d/git-prompt ]; then
  . /etc/bash_completion.d/git-prompt
fi

if [ -f $HOME/.localrc ]; then
  . $HOME/.localrc
fi

# fuzzy finder in bash if installed
if [ -d /usr/share/doc/fzf ] && [ -z "$INSIDE_EMACS" ]; then
  . /usr/share/doc/fzf/examples/key-bindings.bash
fi

# add argument to PATH only if not already present
add_to_path() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    PATH="${PATH:+"$PATH:"}$1"
  fi
}

add_to_path "$HOME/usr/bin"
add_to_path "$HOME/bin"
add_to_path "$HOME/.local/bin"
add_to_path "$HOME/.screenlayout"
add_to_path "$HOME/repos/rofi-menus/scripts"
add_to_path "/snap"

# Rust & Cargo support
[ -d $HOME/.cargo/bin/ ] && add_to_path "$HOME/.cargo/bin"
[ -f $HOME/.cargo/env ] && source "$HOME/.cargo/env"

# ruby setup ##################################################################
if hash rbenv 2>/dev/null; then
  add_to_path "$HOME/.rbenv/bin"
  eval "$(rbenv init -)"
  add_to_path "$HOME/.rbenv/shims"
  [ -f "$HOME/.rbenv/completions/rbenv.bash" ] && source "$HOME/.rbenv/completions/rbenv.bash"
fi

# Go setup
if [ -d /usr/local/go/bin ]; then
  add_to_path "/usr/local/go/bin"
  # if hash go 2>/dev/null; then
  # fi
fi

# switch to 256 color term (especially for using emacs inside term)
# export TERM=screen-256color

LS_COLORS="$LS_COLORS:di=1;36" # change default directory color
LS_COLORS="$LS_COLORS:ln=1;33" # change default link color

# export XMODIFIERS=@im=fcitx
# export GTK_IM_MODULE=fcitx
# export QT_IM_MODULE=fcitx
export GTK_IM_MODULE=xim
export QT_IM_MODULE=xim

use_java_8 () {
  [[ -n $SDKMAN_DIR && -n $JAVA_8_VERSION ]] && sdk use java $JAVA_8_VERSION || export JAVA_HOME=$JAVA_8
}

use_java_17 () {
  [[ -n $SDKMAN_DIR && -n $JAVA_17_VERSION ]] && sdk use java $JAVA_17_VERSION || export JAVA_HOME=$JAVA_17
}

use_java_21 () {
  [[ -n $SDKMAN_DIR && -n $JAVA_21_VERSION ]] && sdk use java $JAVA_21_VERSION || export JAVA_HOME=$JAVA_21
}

use_java_22 () {
  [[ -n $SDKMAN_DIR && -n $JAVA_22_VERSION ]] && sdk use java $JAVA_22_VERSION || export JAVA_HOME=$JAVA_22
}

maven_debug () {
  mvn $@ -Drun.jvmArguments="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"
}

maven_eclipse () {
  mvn eclipse:configure-workspace -Declipse.workspace="$WORKSPACE" eclipse:clean eclipse:eclipse -Dwtpversion=1.5 $@
}

maven_install_eclipse () {
  mvn clean install $@ && mvn eclipse:configure-workspace -Declipse.workspace="$WORKSPACE" eclipse:clean eclipse:eclipse -Dwtpversion=1.5
}

update_etags () {
  [ -f TAGS ] && rm TAGS
  find . -name '*.java' -exec etags -a {} \;
}

update_project () {
  PROJECT_DIR=$1
  FORMER_DIR=$(pwd)
  cd "$PROJECT_DIR" || exit
  PROJECT_NAME=$(basename "$PROJECT_DIR")
  echo "* ${BOLD}$PROJECT_NAME${NORMAL}"
  [ -d ".git" ] && git up
  [ -d ".svn" ] && svn update
  #   update-etags
  echo ""
  cd "$FORMER_DIR" || exit
}

update_all () {
  for dir in $(find "$HOME" -type d -iname '.git' -o -maxdepth 3 -iname '.svn' 2> /dev/null | xargs dirname | sort); do
    update_project "$dir"
  done
}

build_all () {
  FORMER_DIR=$(pwd)
  for dir in $(find "$HOME/projets/" -type f -maxdepth 2 -name 'pom.xml' 2> /dev/null | xargs dirname | sort); do
    cd "$dir" || exit
    echo "building $dir..."
    mvn clean install -U &> "$HOME/projets/mvn-output.log"
    if [ $? != 0 ]; then

      echo "build failed!" ; cp "$HOME/projets/mvn-output.log" "$HOME/projets/mvn-output-$(basename $dir).log"
    fi
  done
  rm "$HOME/projets/mvn-output.log"
  cd "$FORMER_DIR" || exit
}

make_title () {
  max_length=52
  char="*"

  string=$1
  padding=""
  line=""
  title=" "
  for ((i=0; i < ${#string}; i++)); do
    title="${title}${string:$i:1} "
  done

  for ((i=0 ; i < (((max_length - ${#title}) / 2 )) ; i++)); do
    padding="${padding}${char}"
  done

  for ((i=0 ; i < max_length ; i++)); do
    line="${line}${char}"
  done

  echo -e "$line\n${padding}${title^^}${padding}${char}\n$line"
}
export -f make_title

update_repo () {
  PROGRAM_REPO_DIR=$1
  BRANCH=$2
  make_title "git pull"
  cd "$PROGRAM_REPO_DIR" || exit 1
  git fetch --all --tags --prune
  git checkout "$BRANCH"

  DETACH_STATE=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)
  if [[ $DETACH_STATE == "HEAD" ]]; then
    echo "$BRANCH is a tag, no git pull."
  else
    echo "git pull!"
    git pull --autostash
  fi
}
export -f update_repo

clone_repo () {
  PROGRAM_REPO_URL=$1
  REPOS_DIR=$2
  PROGRAM_REPO_DIR=$3
  BRANCH=$4
  make_title "clone"
  mkdir -p "$REPOS_DIR"
  cd "$REPOS_DIR" || exit 1
  git clone "$PROGRAM_REPO_URL"
  cd "$PROGRAM_REPO_DIR" || exit 1
  git checkout "$BRANCH"
}
export -f clone_repo

run_autogen () {
  PROGRAM_NAME="$1"
  make_title "autogen"
  ./autogen.sh
  status=$?
  [ $status -eq 0 ] && notify-send "$PROGRAM_NAME autogen: DONE" \
      || notify-send "$PROGRAM_NAME autogen: FAILED"
  return $status
}
export -f run_autogen

run_configure () {
  PROGRAM_NAME="$1"
  shift
  make_title "configure"
  ./configure $@
  status=$?
  [ $status -eq 0 ] && notify-send "$PROGRAM_NAME configure: DONE" \
      || notify-send "$PROGRAM_NAME configure: FAILED"
  return $status
}
export -f run_configure

run_make () {
  PROGRAM_NAME="$1"
  shift
  make_title "make"
  make -j"$(nproc)" $@
  status=$?
  [ $status -eq 0 ] && notify-send "$PROGRAM_NAME make: DONE" \
      || notify-send "$PROGRAM_NAME make: FAILED"
  return $status
}
export -f run_make

run_make_install () {
  PROGRAM_NAME="$1"
  make_title "make install"
  sudo make install
  status=$?
  [ $status -eq 0 ] && notify-send "$PROGRAM_NAME make install: DONE" \
      || notify-send "$PROGRAM_NAME make install: FAILED"
  return $status
}
export -f run_make_install

# added by travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh

# icons in terminal
[[ -f $HOME/.local/share/icons-in-terminal/icons_bash.sh ]] && source $HOME/.local/share/icons-in-terminal/icons_bash.sh

if [[ "$TERM" != 'dumb' ]] && hash starship 2>/dev/null; then

  eval "$(starship init bash)"
  export STARSHIP_CONFIG=$HOME/.starship.toml

else
  # define a few colours

  BOLD=$(tput bold)
  NORMAL=$(tput sgr0)

  BLACK='\[\e[0;30m\]'
  BLUE='\[\e[0;34m\]'
  GREEN='\[\e[0;32m\]'
  CYAN='\[\e[0;36m\]'
  RED='\[\e[0;31m\]'
  PURPLE='\[\e[0;35m\]'
  BROWN='\[\e[0;33m\]'
  L_GREY='\[\e[0;37m\]'
  GREY='\[\e[1;30m\]'
  L_BLUE='\[\e[1;34m\]'
  L_GREEN='\[\e[1;32m\]'
  L_CYAN='\[\e[1;36m\]'
  L_RED='\[\e[1;31m\]'
  L_PURPLE='\[\e[1;35m\]'
  YELLOW='\[\e[1;33m\]'
  WHITE='\[\e[1;37m\]'
  NC='\[\e[0m\]' # No Colour

  # infos git dans le prompt
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWUNTRACKEDFILES=1
  GIT_PS1_SHOWSTASHSTATE=1
  GIT_PS1_SHOWUPSTREAM=verbose
  GIT_PS1_DESCRIBE_STYLE=branch
  GIT_PS1_SHOWCOLORHINTS=1
  GIT_INFOS='$(__git_ps1)'

  # prompt
  #######################################################
  PS1="$GREY($L_GREEN\u$GREY@$L_BLUE\h$GREY)" # (user@host)
  PS1="${PS1}($RED\A$GREY)" # (23:59) date HH:MM
  PS1="${PS1}($PURPLE\j$GREY)" # (0) jobs
  PS1="${PS1}($CYAN\w$GREY)" # (~/current/directory)
  PS1="${PS1}$L_RED$GIT_INFOS\n" # (master *+%) git infos
  PS1="${PS1}$WHITE→$NC " # '→' prompt character
fi

#docker socket enable for current user
# sudo /usr/bin/chown $(whoami) /var/run/docker.sock

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# $SDKMAN_DIR must be defined in .localrc file
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"
