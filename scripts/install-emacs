#!/usr/bin/env bash
. functions.bash

EMACS_REPO_URL="https://git.savannah.gnu.org/git/emacs.git"
BRANCH="emacs-29"
# NATIVE_COMP="--with-native-compilation" # comment to prevent native compilation

if [[ $# -gt 0 ]]; then
  BRANCH=$1
fi

update-emacs () {
  make_title "git pull"
  cd "$HOME/repos/emacs" || exit 1
  git fetch --all --tags --prune
  git checkout "$BRANCH"

  DETACH_STATE=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)
  if [[ $DETACH_STATE == "HEAD" ]]; then
    echo "$BRANCH is a tag, no git pull."
  else
    echo "git pull!"
    git pull --autostash
  fi
}

clone-emacs () {
  make_title "clone"
  mkdir -p "$HOME/repos"
  cd "$HOME/repos" || exit 1
  git clone "$EMACS_REPO_URL"
  cd "$HOME/repos/emacs" || exit 1
  git checkout "$BRANCH"
}

autogen-emacs () {
  make_title "autogen"
  ./autogen.sh
  status=$?
  [ $status -eq 0 ] && notify-send "emacs autogen: DONE" \
      || notify-send "emacs autogen: FAILED"
  return $status
}

configure-emacs () {
  make_title "configure"
  ./configure "$NATIVE_COMP"
  status=$?
  [ $status -eq 0 ] && notify-send "emacs configure: DONE" \
      || notify-send "emacs configure: FAILED"
  return $status
}

make-emacs () {
  make_title "make"
  # make NATIVE_FULL_AOT=1 -j$(nproc)
  make -j"$(nproc)"
  status=$?
  [ $status -eq 0 ] && notify-send "emacs make: DONE" \
      || notify-send "emacs make: FAILED"
  return $status
}

make-install-emacs () {
  make_title "make install"
  sudo make install
  status=$?
  [ $status -eq 0 ] && notify-send "emacs make install: DONE" \
      || notify-send "emacs make install: FAILED"
  return $status
}

OLD_DIR=$(pwd)
[[ -d "$HOME/repos/emacs/" ]] && update-emacs || clone-emacs
[ $? -eq 0 ] && autogen-emacs
[ $? -eq 0 ] && configure-emacs
[ $? -eq 0 ] && make-emacs
[ $? -eq 0 ] && make-install-emacs

cd "$OLD_DIR" || return
# EOF
